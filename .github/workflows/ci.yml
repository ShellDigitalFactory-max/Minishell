name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  norminette-check:
    name: Norminette Style Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Norminette
        run: |
          sudo apt-get install -y build-essential
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install norminette

      - name: Run Norminette
        run: |
          make norminette

  cppcheck:
    name: Static Analysis - Cppcheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install cppcheck
        run: sudo apt-get install -y cppcheck build-essential

      - name: Run cppcheck
        run: make cppcheck

  clang-analyze:
    name: Static Analysis - Clang Static Analyzer
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install clang
        run: sudo apt-get install -y clang build-essential

      - name: Run Clang Static Analyzer
        run: make clang_analyzer

build:
  name: Build Project
  runs-on: ubuntu-latest

  steps:
    # Étape 1 : Checkout du repository avec les submodules
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: true  # Cela permet de récupérer les submodules

    # Étape 2 : Initialisation et mise à jour des submodules
    - name: Initialize and update submodules
      run: git submodule update --init --recursive

    # Étape 3 : Installation des dépendances nécessaires
    - name: Install build dependencies
      run: |
        sudo apt-get install -y build-essential libreadline-dev  # Ajout de libreadline-dev

    # Étape 4 : Vérification de l'état des fichiers du projet (utile pour le débogage)
    - name: List project files for debugging
      run: find . -name "libft.h"

    # Étape 5 : Compilation du projet
    - name: Build the project
      run: |
        make
        make fclean

  tests-environnement:
    name: Tests environments
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Make test script executable
        run: chmod +x test_minishell.sh

      - name: Run test script
        run: ./e2e/Launch_shell/launch_shell.test.sh
